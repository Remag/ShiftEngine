<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>OptionCount = array_length_1d( MenuOptions );

ActiveOptionPos = 0;
for( var i = 0; i &lt; OptionCount; i++ ) {
    if( !OptionDisabled[i] ) {
        ActiveOptionPos = i;
        break;
    }
}

TickImageIndex = 0;
TickImageSpeed = 2 / 45;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>IsEnabled = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( !IsEnabled ) {
    exit;
}
TickImageIndex += TickImageSpeed;

if( button_check_pressed( global.MenuBackKeyBind ) ) {
    if( BackEventId &gt;= 0 ) {
        event_user( BackEventId );
    }
}
if( button_check_pressed( global.MenuNextKeyBind ) ) {
    for( var optionPos = ActiveOptionPos + 1; optionPos &lt; OptionCount; optionPos++ ) {
        if( !OptionDisabled[optionPos] ) {
            ActiveOptionPos = optionPos;
            break;
        }
    }
}
if( button_check_pressed( global.MenuPreviousKeyBind ) ) {
    for( var optionPos = ActiveOptionPos - 1; optionPos &gt;= 0; optionPos-- ) {
        if( !OptionDisabled[optionPos] ) {
            ActiveOptionPos = optionPos;
            break;
        }
    }
}
if( button_check_pressed( global.MenuSelectKeyBind ) || button_check_pressed( global.MenuSelectSecondKeyBind ) ) {
    if( !OptionDisabled[ActiveOptionPos] ) {
        var confirmEventId = ConfirmEventIds[ActiveOptionPos];
        if( confirmEventId &gt;= 0 ) {
            event_user( confirmEventId );
        }
    }
}
if( button_check_pressed( global.MenuIncreaseKeyBind ) ) {
    if( !OptionDisabled[ActiveOptionPos] ) {
        var increaseEventId = IncreaseEventIds[ActiveOptionPos];
        if( increaseEventId &gt;= 0 ) {
            event_user( increaseEventId );
        }
    }    
}
if( button_check_pressed( global.MenuDecreaseKeyBind ) ) {
    if( !OptionDisabled[ActiveOptionPos] ) {
        var decreaseEventId = DecreaseEventIds[ActiveOptionPos];
        if( decreaseEventId &gt;= 0 ) {
            event_user( decreaseEventId );
        }
    } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign( fa_center );
draw_set_valign( fa_center );
draw_set_font( fMenuOptionFont );

var lineHeight = 48;
for( var i = 0; i &lt; OptionCount; i++ ) {
    var optionX = x;
    var optionY = y + i * lineHeight;
    var fontColor = OptionColor;
    if( OptionDisabled[i] ) {
        fontColor = DisabledOptionColor;
    } else if( i == ActiveOptionPos ) {
        fontColor = ActiveOptionColor;
        var margin = 20;
        var optionWidth = string_width( MenuOptions[i] );
        draw_sprite( sMenuTick, TickImageIndex, optionX - optionWidth / 2 - margin, optionY );
        draw_sprite( sMenuTick, TickImageIndex, optionX + optionWidth / 2 + margin, optionY );
    }   
    draw_text_outline( optionX, optionY, MenuOptions[i], fontColor );        
}

draw_set_halign( fa_left );
draw_set_valign( fa_top );
draw_set_color( c_white );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
