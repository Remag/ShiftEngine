<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>OptionCount = array_length_1d( MenuOptions );

ActiveOptionPos = 0;
for( var i = 0; i &lt; OptionCount; i++ ) {
    if( !OptionDisabled[i] ) {
        ActiveOptionPos = i;
        break;
    }
}

TickImageIndex = 0;
TickImageSpeed = 2 / 45;

MenuNextHoldStep = 0;
MenuPrevHoldStep = 0;
MenuIncHoldStep = 0;
MenuDecHoldStep = 0;
MenuSurface = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free( MenuSurface );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>IsEnabled = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( !IsEnabled ) {
    exit;
}
TickImageIndex += TickImageSpeed;

if( button_check_pressed( global.MenuBackKeyBind ) ) {
    if( BackEventId &gt;= 0 ) {
        event_user( BackEventId );
    }
}

if( button_check( global.MenuNextKeyBind ) ) {
    MenuNextHoldStep++;
} else {
    MenuNextHoldStep = 0;
}
if( button_check_pressed( global.MenuNextKeyBind ) || ( MenuNextHoldStep &gt;= 23 &amp;&amp; MenuNextHoldStep % 4 == 0 ) ) {
    var optionPos = ActiveOptionPos + 1;
    while( true ) {
        if( optionPos &gt;= OptionCount ) {
            optionPos = 0;
        }
        if( !OptionDisabled[optionPos] || optionPos == ActiveOptionPos ) {
            ActiveOptionPos = optionPos;
            break;
        }
        optionPos++;
    }
}

if( button_check( global.MenuPreviousKeyBind ) ) {
    MenuPrevHoldStep++;
} else {
    MenuPrevHoldStep = 0;
}
if( button_check_pressed( global.MenuPreviousKeyBind ) || ( MenuPrevHoldStep &gt;= 23 &amp;&amp; MenuPrevHoldStep % 4 == 0 ) ) {
    var optionPos = ActiveOptionPos - 1;
    while( true ) {
        if( optionPos &lt; 0 ) {
            optionPos = OptionCount - 1;
        }
        if( !OptionDisabled[optionPos] || optionPos == ActiveOptionPos ) {
            ActiveOptionPos = optionPos;
            break;
        }   
        optionPos--;
    }
}

if( button_check_pressed( global.MenuSelectKeyBind ) || button_check_pressed( global.MenuSelectSecondKeyBind ) ) {
    if( !OptionDisabled[ActiveOptionPos] ) {
        var confirmEventId = ConfirmEventIds[ActiveOptionPos];
        if( confirmEventId &gt;= 0 ) {
            event_user( confirmEventId );
        }
    }
}

if( button_check( global.MenuIncreaseKeyBind ) ) {
    MenuIncHoldStep++;
} else {
    MenuIncHoldStep = 0;
}
if( button_check_pressed( global.MenuIncreaseKeyBind ) || MenuIncHoldStep &gt;= 20 ) {
    if( !OptionDisabled[ActiveOptionPos] ) {
        var increaseEventId = IncreaseEventIds[ActiveOptionPos];
        if( increaseEventId &gt;= 0 ) {
            event_user( increaseEventId );
        }
    }    
}

if( button_check( global.MenuDecreaseKeyBind ) ) {
    MenuDecHoldStep++;
} else {
    MenuDecHoldStep = 0;
}
if( button_check_pressed( global.MenuDecreaseKeyBind ) || MenuDecHoldStep &gt;= 20 ) {
    if( !OptionDisabled[ActiveOptionPos] ) {
        var decreaseEventId = DecreaseEventIds[ActiveOptionPos];
        if( decreaseEventId &gt;= 0 ) {
            event_user( decreaseEventId );
        }
    } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free( MenuSurface );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free( MenuSurface );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( !surface_exists( MenuSurface ) ) {
    MenuSurface = surface_create( RectWidth, RectHeight );
    surface_set_target( MenuSurface );
    draw_clear_alpha( c_black, 1 );
} else {
    surface_set_target( MenuSurface );
}

draw_set_color_write_enable( true, true, true, false );
draw_set_valign( fa_center );
draw_set_font( fMenuOptionFont );

var lineHeight = 48;
var menuHeight = lineHeight * OptionCount;
var menuMargin = ( RectHeight - menuHeight ) / 2;
draw_set_color( RectColor );
draw_rectangle( 0, RectHeight, RectWidth, 0, false );
draw_set_color( BorderColor );
draw_rectangle( 0, RectHeight, RectWidth, 0, true );
draw_set_color( c_white );

for( var i = 0; i &lt; OptionCount; i++ ) {
    var optionX = RectWidth / 2;
    var optionY = menuMargin + lineHeight / 2 + i * lineHeight;
    var fontColor = OptionColor;
    var tickMargin = 20;
    if( OptionDisabled[i] ) {
        fontColor = DisabledOptionColor;
    } else if( i == ActiveOptionPos ) {
        fontColor = ActiveOptionColor;
    }
    
    if( OptionValues[i] == "" ) {
        if( i == ActiveOptionPos ) {
            var optionWidth = string_width( MenuOptions[i] );
            draw_sprite( sMenuTick, TickImageIndex, optionX - optionWidth / 2 - tickMargin, optionY );
            draw_sprite( sMenuTick, TickImageIndex, optionX + optionWidth / 2 + tickMargin, optionY );
        }   
        draw_set_halign( fa_center );
        draw_text_outline( optionX, optionY, MenuOptions[i], fontColor );        
    } else {
        var lineHWidth = ValueOptionLineWidth / 2;
        if( i == ActiveOptionPos ) {
            draw_sprite( sMenuTick, TickImageIndex, optionX - lineHWidth - tickMargin, optionY );
            draw_sprite( sMenuTick, TickImageIndex, optionX + lineHWidth + tickMargin, optionY );
        }
        draw_set_halign( fa_left );
        draw_text_outline( optionX - lineHWidth, optionY, MenuOptions[i], fontColor );  
        draw_set_halign( fa_right );
        draw_text_outline( optionX + lineHWidth, optionY, OptionValues[i], fontColor );  
    }
}

draw_set_halign( fa_left );
draw_set_valign( fa_top );
draw_set_color( c_white );
draw_set_color_write_enable( true, true, true, true );

surface_reset_target();
var rLeft = x - RectWidth / 2;
var rTop = y - RectHeight / 2;
draw_surface_ext( MenuSurface, rLeft, rTop, image_xscale, image_yscale, image_angle, image_blend, image_alpha );
draw_set_alpha( 1 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
