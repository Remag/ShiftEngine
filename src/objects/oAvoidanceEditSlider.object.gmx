<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SliderHMargin = 64;
SliderVMargin = 48;

ActiveTickPos = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( !avoidance_is_playing() ) {
    instance_destroy();
    exit;
}

// Find an active tick.

var editSliderY = view_yview[0] + SliderVMargin;
var editSliderLeft = view_xview[0] + SliderHMargin;
var editSliderRight = view_xview[0] + view_wview[0] - SliderHMargin;
var editSliderLength = editSliderRight - editSliderLeft;

var avoidance = global.ActiveAvoidance;
var mouseDeltaY = abs( mouse_y - editSliderY );
var bestTickPos = -1;
if( mouseDeltaY &lt; 24 ) {
    var timingsList = oAvoidancePersistentData.TimingsList;
    var count = ds_list_size( timingsList );
    var bestTickDelta = 5;
    for( var i = 0; i &lt; count; i++ ) {
        var tickStep = timingsList[|i];
        var tickRelPos = tickStep / avoidance.Duration;
        tickRelPos = clamp( tickRelPos, 0, 1 );
        var tickPxPos = editSliderLeft + tickRelPos * editSliderLength;
        var mouseDeltaX = abs( mouse_x - tickPxPos );
        if( mouseDeltaX &lt;= bestTickDelta ) {
            bestTickPos = i;
            bestTickDelta = mouseDeltaX;
        }
    }
}
ActiveTickPos = bestTickPos;

if( mouse_check_button_pressed( mb_left ) ) {
    if( mouseDeltaY &lt; 24 ) {
        var clickPosX = mouse_x - editSliderLeft;
        var relPos = clickPosX / editSliderLength;
        if( ActiveTickPos != -1 ) {
            relPos = ( timingsList[|ActiveTickPos] - 1 ) / avoidance.Duration;
        }
        relPos = clamp( relPos, 0, 1 );
        var stepPos = round( relPos * avoidance.Duration );
        avoidance_set_step( stepPos );
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var avoidance = global.ActiveAvoidance;
var step = avoidance.Step;

var editSliderY = view_yview[0] + SliderVMargin;
var editSliderLeft = view_xview[0] + SliderHMargin;
var editSliderRight = view_xview[0] + view_wview[0] - SliderHMargin;
var editSliderLength = editSliderRight - editSliderLeft;

var relPos = step / avoidance.Duration;
relPos = clamp( relPos, 0, 1 );
var pxOffset = relPos * editSliderLength;

var sliderBarX = editSliderLeft + pxOffset;
var sliderBarY = editSliderY;
var sliderBarWidth = 4;
var sliderBarHeight = 20;
var tickLineHeight = 40;

var sliderLineRadius = 2;
var sliderLeftLineWidth = pxOffset - editSliderLeft;
var sliderLeftLineHeight = 2;

draw_set_colour( c_white );
draw_rectangle( sliderBarX, editSliderY - sliderLineRadius, editSliderRight, editSliderY + sliderLineRadius, false );
draw_set_colour( c_lime );
draw_rectangle( editSliderLeft, editSliderY - sliderLineRadius, sliderBarX, editSliderY + sliderLineRadius, false );
draw_set_colour( c_white );
draw_rectangle( sliderBarX - sliderBarWidth / 2, sliderBarY + sliderBarHeight / 2, sliderBarX + sliderBarWidth / 2, sliderBarY - sliderBarHeight / 2, false );

// Timing ticks.
var timingsList = oAvoidancePersistentData.TimingsList;
var count = ds_list_size( timingsList );
for( var i = 0; i &lt; count; i++ ) {
    var tickStep = timingsList[|i];
    var tickColor = c_white;
    if( i == ActiveTickPos ) {
        tickColor = c_yellow;
    } else if( step &gt; tickStep ) {
        tickColor = c_lime;
    }
    var tickRelPos = tickStep / avoidance.Duration;
    tickRelPos = clamp( tickRelPos, 0, 1 );
    var tickPxPos = editSliderLeft + tickRelPos * editSliderLength;
    draw_set_color( tickColor );
    draw_rectangle( tickPxPos, editSliderY - tickLineHeight / 2, tickPxPos, editSliderY + tickLineHeight / 2, false );
}

draw_set_colour( c_white );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
