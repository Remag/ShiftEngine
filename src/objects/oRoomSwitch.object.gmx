<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sTrigger</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup

RoomTo = noone;
EntranceTo = 0;
Autosave = false;

PreserveAirJumps = false;
PreserveGravity = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go to room
if( room_exists( RoomTo ) ) {
    var entranceData = instance_create( 0, 0, oPlayerEntranceData );
    entranceData.Autosave = Autosave;
    entranceData.EntranceId = EntranceTo;
    entranceData.Dir = other.Dir;
    entranceData.MaxAirJumpCount = other.MaxAirJumpCount;
    if( PreserveAirJumps ) {
        entranceData.CurrentAirJumpCount = other.CurrentAirJumpCount;
    } else {
        entranceData.CurrentAirJumpCount = other.MaxAirJumpCount;
    }
    if( PreserveGravity ) {
        entranceData.GravityDir = other.GravityDir;
    } else {
        entranceData.GravityDir = 0;
    }
    room_goto( RoomTo );
} else {
    show_debug_message( "Room in roomSwitch does not exist: " + string( RoomTo ) );
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
