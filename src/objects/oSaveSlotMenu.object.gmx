<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oBaseMenu</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MenuOptions[0] = "";
MenuOptions[1] = "Back";

OptionDisabled[0] = false;
OptionDisabled[1] = false;

// Events triggered on pressing confirm.
ConfirmEventIds[0] = 0;
ConfirmEventIds[1] = 1;

// Events triggered on pressing increase.
IncreaseEventIds[0] = 2;
IncreaseEventIds[1] = -1;

// Events triggered on pressing decrease.
DecreaseEventIds[0] = 3;
DecreaseEventIds[1] = -1;

BackEventId = 1;

OptionColor = c_white;
DisabledOptionColor = OptionColor;
ActiveOptionColor = c_yellow;

IsEnabled = false;

event_inherited();

/////////////////////////////////////////////
// Save slot data.

ForceStartNewGame = false;
OverwriteModePos = -1;
ActiveSlotIndex = clamp( global.LastSaveIndex, 1, 3 );
SaveData[1] = get_save_data( 1 );
SaveData[2] = get_save_data( 2 );
SaveData[3] = get_save_data( 3 );

SlotTextColor = c_white;
ActiveSlotColor = ActiveOptionColor;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup
ds_map_destroy( SaveData[1] );
ds_map_destroy( SaveData[2] );
ds_map_destroy( SaveData[3] );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Decrease slot index
if( OverwriteModePos == -1 ) {
    ActiveSlotIndex--;
    if( ActiveSlotIndex &lt; 1 ) {
        ActiveSlotIndex = 3;
    }
} else {
    OverwriteModePos = max( 0, OverwriteModePos - 1 );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Increase slot index
if( OverwriteModePos == -1 ) {
    ActiveSlotIndex++;
    if( ActiveSlotIndex &gt; 3 ) {
        ActiveSlotIndex = 1;
    }
} else {
    OverwriteModePos = min( 1, OverwriteModePos + 1 );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Back to main menu
if( OverwriteModePos != -1 ) {
    OverwriteModePos = -1;
    OptionDisabled[1] = false;
} else {
    IsEnabled = false;
    oMainMenu.alarm[0] = 1;
    instance_move_to( oMainMenu, x, y, 30 );
    instance_move_to( id, xstart, ystart, 30 );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Load or start a new game
if( OverwriteModePos == -1 ) {
    var saveData = SaveData[ActiveSlotIndex];
    var isFreshSave = saveData[?"engine.freshSave"];
    if( ForceStartNewGame &amp;&amp; !isFreshSave ) {
        OverwriteModePos = 1;
        OptionDisabled[1] = true;
    } else {
        initialize_game( ActiveSlotIndex );
    }
} else if( OverwriteModePos == 1 ) {
    OverwriteModePos = -1;
    OptionDisabled[1] = false;
} else {
    delete_save_data( ActiveSlotIndex );
    initialize_game( ActiveSlotIndex );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user( 15 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user( 15 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign( fa_left );
draw_set_valign( fa_center );
draw_set_font( fMenuDescriptionFont );
var slotRectWidth = 444;
var slotRectHeight = 120;
var textLMargin = 8;
var textTMargin = 10;
var tickMargin = 20;
var lineHeight = 32;
var slotHeaderMargin = 5; 

// Slot rectangle.
var rectL = x - slotRectWidth / 2;
var rectR = x + slotRectWidth / 2;
var rectT = y;
var rectB = y + slotRectHeight;
draw_set_color( c_black );
draw_rectangle( rectL, rectB, rectR, rectT, false );
draw_set_color( c_white );
var rectSegmentWidth = slotRectWidth / 3;
draw_rectangle( rectL, rectB, rectL + rectSegmentWidth, rectT, true );
draw_rectangle( rectL + rectSegmentWidth, rectB, rectR - rectSegmentWidth, rectT, true );
draw_rectangle( rectR - rectSegmentWidth, rectB, rectR, rectT, true );

// Slot information.
for( var i = 0; i &lt; 3; i++ ) {
    var slotX = rectL + i * rectSegmentWidth;
    var slotTextY = y + textTMargin + lineHeight / 2;
    var slotIndex = i + 1;
    var textColor = SlotTextColor;
    var slotName = "Slot " + string( slotIndex );
    var slotCenterX = slotX + rectSegmentWidth / 2;
    if( ActiveSlotIndex == slotIndex &amp;&amp; ActiveOptionPos == 0 ) {
        textColor = ActiveSlotColor;
        var slotWidth = string_width( slotName );
        draw_sprite( sMenuTick, TickImageIndex, slotCenterX - slotWidth / 2 - tickMargin, slotTextY );
        draw_sprite( sMenuTick, TickImageIndex, slotCenterX + slotWidth / 2 + tickMargin, slotTextY );
    }
    draw_set_halign( fa_center );
    draw_text_outline( slotCenterX, slotTextY, slotName, textColor );
    draw_set_halign( fa_left );
    
    if( OverwriteModePos == -1 || ActiveSlotIndex != slotIndex ) {
        var saveData = SaveData[slotIndex];
        var isFreshSave = saveData[?"engine.freshSave"];
        if( isFreshSave ) {
            // New save label.
            draw_set_halign( fa_center );
            draw_text_outline( slotX + rectSegmentWidth / 2, slotTextY + lineHeight * 1.5, "New Game", textColor );
            draw_set_halign( fa_left );
        } else {
            // Death and time information.
            var deathCount = saveData[?"engine.death"];
            var time = saveData[?"engine.time"];
        
            draw_text_outline( slotX + textLMargin + 22, slotTextY + lineHeight + slotHeaderMargin, string( deathCount ), textColor );
            draw_text_outline( slotX + textLMargin + 22, slotTextY + lineHeight * 2 + slotHeaderMargin, create_time_string( time ), textColor );
            draw_sprite( sSkullIcon, 0, slotX + textLMargin, slotTextY + lineHeight + slotHeaderMargin );
            draw_sprite( sTimeIcon, 0, slotX + textLMargin, slotTextY + lineHeight * 2 + slotHeaderMargin );
        }
    } else {
        // Overwrite prompt.
        draw_set_halign( fa_center );
        draw_text_outline( slotX + rectSegmentWidth / 2, slotTextY + lineHeight + slotHeaderMargin, "Overwrite?", c_orange );
        draw_set_halign( fa_left );
        var yesColor = ActiveSlotColor;
        var noColor = SlotTextColor;
        if( OverwriteModePos == 1 ) {
            yesColor = SlotTextColor;
            noColor = ActiveSlotColor;
        }  
        draw_text_outline( slotX + textLMargin, slotTextY + lineHeight * 2 + slotHeaderMargin, "Yes", yesColor );
        draw_text_outline( slotX + textLMargin + 96, slotTextY + lineHeight * 2 + slotHeaderMargin, "No", noColor );
    }
}

// Back option text.
draw_set_halign( fa_center );
draw_set_valign( fa_center );
draw_set_font( fMenuOptionFont );
var optionX = x;
var optionY = y + slotRectHeight + 48;
var fontColor = OptionColor;
if( OptionDisabled[1] ) {
    fontColor = DisabledOptionColor;
} else if( 1 == ActiveOptionPos ) {
    fontColor = ActiveOptionColor;
    var margin = 20;
    var optionWidth = string_width( MenuOptions[1] );
    draw_sprite( sMenuTick, TickImageIndex, optionX - optionWidth / 2 - margin, optionY );
    draw_sprite( sMenuTick, TickImageIndex, optionX + optionWidth / 2 + margin, optionY );
}   
draw_text_outline( optionX, optionY, MenuOptions[1], fontColor );  

draw_set_halign( fa_left );
draw_set_valign( fa_top );
draw_set_color( c_white );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
